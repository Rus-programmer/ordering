// Code generated by MockGen. DO NOT EDIT.
// Source: ordering/middleware (interfaces: Middleware)
//
// Generated by this command:
//
//	mockgen -package mockMiddleware -destination middleware/mock/middleware.go ordering/middleware Middleware
//

// Package mockMiddleware is a generated GoMock package.
package mockMiddleware

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "go.uber.org/mock/gomock"
)

// MockMiddleware is a mock of Middleware interface.
type MockMiddleware struct {
	ctrl     *gomock.Controller
	recorder *MockMiddlewareMockRecorder
	isgomock struct{}
}

// MockMiddlewareMockRecorder is the mock recorder for MockMiddleware.
type MockMiddlewareMockRecorder struct {
	mock *MockMiddleware
}

// NewMockMiddleware creates a new mock instance.
func NewMockMiddleware(ctrl *gomock.Controller) *MockMiddleware {
	mock := &MockMiddleware{ctrl: ctrl}
	mock.recorder = &MockMiddlewareMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMiddleware) EXPECT() *MockMiddlewareMockRecorder {
	return m.recorder
}

// Auth mocks base method.
func (m *MockMiddleware) Auth() gin.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Auth")
	ret0, _ := ret[0].(gin.HandlerFunc)
	return ret0
}

// Auth indicates an expected call of Auth.
func (mr *MockMiddlewareMockRecorder) Auth() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Auth", reflect.TypeOf((*MockMiddleware)(nil).Auth))
}

// LogDB mocks base method.
func (m *MockMiddleware) LogDB() gin.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogDB")
	ret0, _ := ret[0].(gin.HandlerFunc)
	return ret0
}

// LogDB indicates an expected call of LogDB.
func (mr *MockMiddlewareMockRecorder) LogDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogDB", reflect.TypeOf((*MockMiddleware)(nil).LogDB))
}
