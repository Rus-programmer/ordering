// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: order.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (customer_id, total_price)
VALUES ($1, $2)
RETURNING id, customer_id, total_price, status, is_deleted, created_at, updated_at
`

type CreateOrderParams struct {
	CustomerID int64 `json:"customer_id"`
	TotalPrice int64 `json:"total_price"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRow(ctx, createOrder, arg.CustomerID, arg.TotalPrice)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.TotalPrice,
		&i.Status,
		&i.IsDeleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteOrder = `-- name: DeleteOrder :exec
DELETE
FROM orders
WHERE id = $1
`

func (q *Queries) DeleteOrder(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteOrder, id)
	return err
}

const getOrder = `-- name: GetOrder :one
SELECT id, customer_id, total_price, status, is_deleted, created_at, updated_at
FROM orders o
WHERE o.id = $1
  and (customer_id = $2 OR EXISTS (SELECT 1 FROM customers WHERE id = $2 AND role = 'admin'))
  AND is_deleted = false
`

type GetOrderParams struct {
	ID         int64 `json:"id"`
	CustomerID int64 `json:"customer_id"`
}

func (q *Queries) GetOrder(ctx context.Context, arg GetOrderParams) (Order, error) {
	row := q.db.QueryRow(ctx, getOrder, arg.ID, arg.CustomerID)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.TotalPrice,
		&i.Status,
		&i.IsDeleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listOrders = `-- name: ListOrders :many
SELECT id
FROM orders
WHERE (customer_id = $1 OR EXISTS (SELECT 1 FROM customers WHERE id = $1 AND role = 'admin'))
  AND ($2::order_status IS NULL OR status = $2)
  AND ($3::bigint IS NULL OR total_price >= $3)
  AND ($4::bigint IS NULL OR total_price <= $4)
  AND is_deleted = false
`

type ListOrdersParams struct {
	CustomerID int64           `json:"customer_id"`
	Status     NullOrderStatus `json:"status"`
	MinPrice   pgtype.Int8     `json:"min_price"`
	MaxPrice   pgtype.Int8     `json:"max_price"`
}

func (q *Queries) ListOrders(ctx context.Context, arg ListOrdersParams) ([]int64, error) {
	rows, err := q.db.Query(ctx, listOrders,
		arg.CustomerID,
		arg.Status,
		arg.MinPrice,
		arg.MaxPrice,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []int64{}
	for rows.Next() {
		var id int64
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const softDeleteOrder = `-- name: SoftDeleteOrder :one
UPDATE orders o
SET is_deleted = TRUE
WHERE o.id = $1
  AND (customer_id = $2 OR EXISTS (SELECT 1 FROM customers WHERE id = $2 AND role = 'admin'))
RETURNING id, customer_id, total_price, status, is_deleted, created_at, updated_at
`

type SoftDeleteOrderParams struct {
	ID         int64 `json:"id"`
	CustomerID int64 `json:"customer_id"`
}

func (q *Queries) SoftDeleteOrder(ctx context.Context, arg SoftDeleteOrderParams) (Order, error) {
	row := q.db.QueryRow(ctx, softDeleteOrder, arg.ID, arg.CustomerID)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.TotalPrice,
		&i.Status,
		&i.IsDeleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateOrder = `-- name: UpdateOrder :one
UPDATE orders o
SET
    status = COALESCE($3, status),
    total_price = COALESCE($4, total_price)
WHERE o.id = $1
  AND (customer_id = $2 OR EXISTS (SELECT 1 FROM customers WHERE id = $2 AND role = 'admin'))
RETURNING id, customer_id, total_price, status, is_deleted, created_at, updated_at
`

type UpdateOrderParams struct {
	ID         int64           `json:"id"`
	CustomerID int64           `json:"customer_id"`
	Status     NullOrderStatus `json:"status"`
	TotalPrice pgtype.Int8     `json:"total_price"`
}

func (q *Queries) UpdateOrder(ctx context.Context, arg UpdateOrderParams) (Order, error) {
	row := q.db.QueryRow(ctx, updateOrder,
		arg.ID,
		arg.CustomerID,
		arg.Status,
		arg.TotalPrice,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.TotalPrice,
		&i.Status,
		&i.IsDeleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
