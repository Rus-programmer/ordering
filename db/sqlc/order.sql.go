// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: order.sql

package db

import (
	"context"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (
  customer_id
) VALUES (
  $1
) RETURNING id, customer_id, status, is_deleted, created_at, updated_at
`

func (q *Queries) CreateOrder(ctx context.Context, customerID int64) (Order, error) {
	row := q.db.QueryRow(ctx, createOrder, customerID)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.Status,
		&i.IsDeleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

type CreateOrderProductsParams struct {
	OrderID       int64 `json:"order_id"`
	ProductID     int64 `json:"product_id"`
	OrderedAmount int64 `json:"ordered_amount"`
}

const deleteOrder = `-- name: DeleteOrder :exec
DELETE FROM orders WHERE id = $1
`

func (q *Queries) DeleteOrder(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteOrder, id)
	return err
}

const getOrder = `-- name: GetOrder :one
SELECT id, customer_id, status, is_deleted, created_at, updated_at FROM orders o
WHERE o.id = $1 and (customer_id = $2 OR EXISTS (SELECT 1 FROM customers WHERE id = $2 AND role = 'admin'))
`

type GetOrderParams struct {
	ID         int64 `json:"id"`
	CustomerID int64 `json:"customer_id"`
}

func (q *Queries) GetOrder(ctx context.Context, arg GetOrderParams) (Order, error) {
	row := q.db.QueryRow(ctx, getOrder, arg.ID, arg.CustomerID)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.Status,
		&i.IsDeleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOrderProducts = `-- name: GetOrderProducts :many
SELECT order_id, product_id, ordered_amount FROM order_products where order_id=$1
`

func (q *Queries) GetOrderProducts(ctx context.Context, orderID int64) ([]OrderProduct, error) {
	rows, err := q.db.Query(ctx, getOrderProducts, orderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []OrderProduct{}
	for rows.Next() {
		var i OrderProduct
		if err := rows.Scan(&i.OrderID, &i.ProductID, &i.OrderedAmount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTotalPrice = `-- name: GetTotalPrice :one
SELECT SUM(p.price * op.ordered_amount)
FROM order_products op
JOIN products p ON op.product_id = p.id
WHERE op.order_id = $1
`

func (q *Queries) GetTotalPrice(ctx context.Context, orderID int64) (int64, error) {
	row := q.db.QueryRow(ctx, getTotalPrice, orderID)
	var sum int64
	err := row.Scan(&sum)
	return sum, err
}

const listOrders = `-- name: ListOrders :many
SELECT id, customer_id, status, is_deleted, created_at, updated_at FROM orders
WHERE customer_id = $1 OR EXISTS (SELECT 1 FROM customers WHERE id = $1 AND role = 'admin')
`

func (q *Queries) ListOrders(ctx context.Context, customerID int64) ([]Order, error) {
	rows, err := q.db.Query(ctx, listOrders, customerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Order{}
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.CustomerID,
			&i.Status,
			&i.IsDeleted,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const softDeleteOrder = `-- name: SoftDeleteOrder :one
UPDATE orders o
SET is_deleted = TRUE
WHERE o.id = $1 AND (customer_id = $2 OR EXISTS (SELECT 1 FROM customers WHERE id = $2 AND role = 'admin'))
RETURNING id, customer_id, status, is_deleted, created_at, updated_at
`

type SoftDeleteOrderParams struct {
	ID         int64 `json:"id"`
	CustomerID int64 `json:"customer_id"`
}

func (q *Queries) SoftDeleteOrder(ctx context.Context, arg SoftDeleteOrderParams) (Order, error) {
	row := q.db.QueryRow(ctx, softDeleteOrder, arg.ID, arg.CustomerID)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.Status,
		&i.IsDeleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateOrderStatus = `-- name: UpdateOrderStatus :one
UPDATE orders o
SET status = $3, updated_at = NOW()
WHERE o.id = $1 AND (customer_id = $2 OR EXISTS (SELECT 1 FROM customers WHERE id = $2 AND role = 'admin'))
RETURNING id, customer_id, status, is_deleted, created_at, updated_at
`

type UpdateOrderStatusParams struct {
	ID         int64       `json:"id"`
	CustomerID int64       `json:"customer_id"`
	Status     OrderStatus `json:"status"`
}

func (q *Queries) UpdateOrderStatus(ctx context.Context, arg UpdateOrderStatusParams) (Order, error) {
	row := q.db.QueryRow(ctx, updateOrderStatus, arg.ID, arg.CustomerID, arg.Status)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.Status,
		&i.IsDeleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
