// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: metrics.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getErrorRate = `-- name: GetErrorRate :one
SELECT ROUND(100.0 * SUM(CASE WHEN status_code >= 400 THEN 1 ELSE 0 END) / COUNT(*), 2) AS error_rate
FROM logs
`

func (q *Queries) GetErrorRate(ctx context.Context) (pgtype.Numeric, error) {
	row := q.db.QueryRow(ctx, getErrorRate)
	var error_rate pgtype.Numeric
	err := row.Scan(&error_rate)
	return error_rate, err
}

const getTotalRequests = `-- name: GetTotalRequests :one
SELECT COUNT(*) AS total_requests
FROM logs
`

func (q *Queries) GetTotalRequests(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getTotalRequests)
	var total_requests int64
	err := row.Scan(&total_requests)
	return total_requests, err
}

const getTotalRequestsByMethod = `-- name: GetTotalRequestsByMethod :many
SELECT method, COUNT(*) AS count
FROM logs
GROUP BY method
`

type GetTotalRequestsByMethodRow struct {
	Method string `json:"method"`
	Count  int64  `json:"count"`
}

func (q *Queries) GetTotalRequestsByMethod(ctx context.Context) ([]GetTotalRequestsByMethodRow, error) {
	rows, err := q.db.Query(ctx, getTotalRequestsByMethod)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetTotalRequestsByMethodRow{}
	for rows.Next() {
		var i GetTotalRequestsByMethodRow
		if err := rows.Scan(&i.Method, &i.Count); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTotalRequestsByPath = `-- name: GetTotalRequestsByPath :many
SELECT path, COUNT(*) AS count
FROM logs
GROUP BY path
ORDER BY count DESC
`

type GetTotalRequestsByPathRow struct {
	Path  string `json:"path"`
	Count int64  `json:"count"`
}

func (q *Queries) GetTotalRequestsByPath(ctx context.Context) ([]GetTotalRequestsByPathRow, error) {
	rows, err := q.db.Query(ctx, getTotalRequestsByPath)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetTotalRequestsByPathRow{}
	for rows.Next() {
		var i GetTotalRequestsByPathRow
		if err := rows.Scan(&i.Path, &i.Count); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTotalRequestsByStatusCode = `-- name: GetTotalRequestsByStatusCode :many
SELECT status_code, COUNT(*) AS count
FROM logs
GROUP BY status_code
`

type GetTotalRequestsByStatusCodeRow struct {
	StatusCode int32 `json:"status_code"`
	Count      int64 `json:"count"`
}

func (q *Queries) GetTotalRequestsByStatusCode(ctx context.Context) ([]GetTotalRequestsByStatusCodeRow, error) {
	rows, err := q.db.Query(ctx, getTotalRequestsByStatusCode)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetTotalRequestsByStatusCodeRow{}
	for rows.Next() {
		var i GetTotalRequestsByStatusCodeRow
		if err := rows.Scan(&i.StatusCode, &i.Count); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
